# -*- coding: utf-8 -*-
"""manual_pron_neurona.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14WpVRUs0Ph0vkt3GalYGmimxIER_7DQs
"""

#  Función para calcular la salida de una neurona individual.


#funcion lineal

import numpy as np

def neuron(x, w, b):
  """
  Función para calcular la salida de una neurona individual.

  Args:
      x: Vector de entrada (1 x entrada).
      w: Vector de pesos (1 x entrada).
      b: Sesgo escalar.

  Returns:
      y: Salida de la neurona (escalar).
  """
  z = np.dot(x, w) + b  # Combinación lineal de entrada y pesos
  y = z #funcion lineal
  return y

# Ejemplo de uso
w = np.array([0.5, -0.2])  # Vector de pesos
b = 0.3  # Sesgo
x = np.array([1.0, 0.5])  # Vector de entrada

y = neuron(x, w, b)
print("Salida de la neurona:", y)

# Función sigmoide

def neuron(x, w, b):
  """
  Función para calcular la salida de una neurona individual.

  Args:
      x: Vector de entrada (1 x entrada).
      w: Vector de pesos (1 x entrada).
      b: Sesgo escalar.

  Returns:
      y: Salida de la neurona (escalar).
  """
  z = np.dot(x, w) + b  # Combinación lineal de entrada y pesos
  y = 1 / (1 + np.exp(-z))  # Función sigmoide
  return y

# Ejemplo de uso
w = np.array([0.5, -0.2])  # Vector de pesos
b = 0.3  # Sesgo
x = np.array([1.0, 0.5])  # Vector de entrada

y = neuron(x, w, b)
print("Salida de la neurona:", y)

# Función sofmax

def neuron(x, w, b):
  """
  Función para calcular la salida de una neurona individual.

  Args:
      x: Vector de entrada (1 x entrada).
      w: Vector de pesos (1 x entrada).
      b: Sesgo escalar.

  Returns:
      y: Salida de la neurona (escalar).
  """
  z = np.dot(x, w) + b  # Combinación lineal de entrada y pesos
  y = np.exp(z)/np.sum(np.exp(z)) # Función sofmax
  return y

# Ejemplo de uso
w = np.array([0.5, -0.2])  # Vector de pesos
b = 0.3  # Sesgo
x = np.array([1.0, 0.5])  # Vector de entrada

y = neuron(x, w, b)
print("Salida de la neurona:", y)

"""Ejemplo académico:
Definiendo funciones en python para calcular:

W x + b = Z --> relu ---> y
"""

def get_output_from_MLP_input(W,x,b,activation="linear"):
  #print("W = ",end='\n')
  #print(W)
  print(f"W = \n {W} \n")
  #print()

  print("x = ",end='\n')
  print(x)
  print("b = ",end='\n')
  print(b)
  # arguments:
  # W,x and b are arrays

  # operations
  # Z = W x  +  b
  #Z = np.matmul(W,x) + b
  Z = np.dot(W,x) + b

  print("Z = ",end='\n')
  print(Z)

  if activation=="linear":
    y = Z

  if activation=="relu":
    # Ternary operator to define a relu function
    #y = Z if Z>=0 else 0
    #y = Z if Z>0 else 0
    #y = 0 if Z<0 else Z
    #y = 0 if Z<=0 else Z
    y = np.array([0 if z<=0 else z for z in Z])

  if activation == "sigmoide":
      y = 1 / (1 + np.exp(-Z))

  if activation == "tanh":
    y = (np.exp(Z) - np.exp(-Z)) / (np.exp(Z) + np.exp(-Z))

  if activation == "sofmax":
     y = np.exp(z) / np.sum(np.exp(z))





  print("y = ",end='\n')
  print(y)

  return y

# Testing (linear)

W = np.array([ [1,-1,1]  , [1,1,0] ,  [0,1,1] ,  [1,0,1]    ])
x = np.array([2, 1, 3])
b = np.array([-5, 0, 1, -2])

y = get_output_from_MLP_input(W,x,b,activation="linear")
y

# Testing (relu)

W = np.array([ [1,-1,1]  , [1,1,0] ,  [0,1,1] ,  [1,0,1]    ])
x = np.array([2, 1, 3])
b = np.array([-5, 0, 1, -2])

y = get_output_from_MLP_input(W,x,b,"relu")
y

# Testing ("sigmoide")

W = np.array([ [1,-1,1]  , [1,1,0] ,  [0,1,1] ,  [1,0,1]    ])
x = np.array([2, 1, 3])
b = np.array([-5, 0, 1, -2])

y = get_output_from_MLP_input(W,x,b,"sigmoide")
y

# Testing ("tanh")

W = np.array([ [1,-1,1]  , [1,1,0] ,  [0,1,1] ,  [1,0,1]    ])
x = np.array([2, 1, 3])
b = np.array([-5, 0, 1, -2])

y = get_output_from_MLP_input(W,x,b,"tanh")
y

# Testing ("sofmax")
z = np.dot(W, x) + b

W = np.array([ [1,-1,1]  , [1,1,0] ,  [0,1,1] ,  [1,0,1]    ])
x = np.array([2, 1, 3])
b = np.array([-5, 0, 1, -2])

y= get_output_from_MLP_input(W,x,b,"sofmax")
y

array = np.array([0.00194695, 0.10629962, 0.78545382, 0.10629962])

# Sum the elements in the array
total_sum = np.sum(array)

print("Suma de los elementos:", total_sum)